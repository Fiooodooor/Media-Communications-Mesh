
name: Scan CodeQL

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
  schedule:
    - cron: '0 18 * * 1-5'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  MTL_BUILD_DISABLE_PCAPNG: true
  LIBFABRIC_DIR: /tmp/libfabric
  XDP_VERSION: 5c88569dd15e55db678b897b8ea2a73aeaf956f4
  XDP_DIR: /tmp/xdp
  GRPC_VERSION: v1.58.0
  GRPC_DIR: /tmp/grpc
  PREFIX_DIR: /usr/local
  DEBIAN_FRONTEND: noninteractive

permissions:
  contents: read

jobs:
  analyze:
    name: Analyze
    runs-on: ${{ matrix.runner-os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        runner-os: [ 'ubuntu-22.04' ]
    permissions:
      actions: read
      contents: read
      security-events: write
    defaults:
      run:
        shell: bash

    steps:
    - name: 'Harden Runner'
      uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
      with:
        egress-policy: audit

    - name: 'Checkout repository'
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: 'Install dependencies'
      run: |
        source scripts/setup_build_env.sh
        sudo -E install_package_dependencies

    - name: 'Build and Install xdp and libbpf'
      run: |
        source scripts/setup_build_env.sh
        sudo -E lib_install_xdp_bpf_tools

    - name: 'Build and Install libfabric'
      run: |
        source scripts/setup_build_env.sh
        sudo -E lib_install_fabrics

    - name: 'Build and Install DPDK and MTL'
      run: |
        source scripts/setup_build_env.sh
        lib_download_mtl_and_dpdk
        sudo -E lib_install_mtl_and_dpdk

    - name: 'Build and Install JPEG XS'
      run: |
        source scripts/setup_build_env.sh
        sudo -E lib_install_jpeg_xs
        sudo -E lib_install_mtl_jpeg_xs_plugin 

    # - name: 'Restore cached for gRPC build'
    #   id: grpc-cache-restore
    #   uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
    #   with:
    #     path: ${{ env.GRPC_DIR }}
    #     key: ${{ runner.os }}-grpc${{ env.GRPC_VERSION }}

    - name: 'Build gRPC'
      # if: steps.grpc-cache-restore.outputs.cache-hit != 'true'
      run: |
        source scripts/setup_build_env.sh
        sudo -E lib_install_grpc

    # - name: 'Save cache for gRPC build'
    #   if: steps.grpc-cache-restore.outputs.cache-hit != 'true'
    #   id: grpc-cache-save
    #   uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
    #   with:
    #     path: ${{ env.GRPC_DIR }}
    #     key: ${{ steps.grpc-cache-restore.outputs.cache-primary-key }}

    # - name: 'Install gRPC'
    #   run: |
    #     sudo cmake --install "${GRPC_DIR}/cmake/build"  && \
    #     rm -rf "${GRPC_DIR}"

    - name: 'Initialize CodeQL'
      uses: github/codeql-action/init@b611370bb5703a7efb587f9d136a52ea24c5c38c # v3.25.11
      with:
        languages: 'c-cpp'
        config-file: ${{ github.workspace }}/.github/codeql/codeql-config.yml

    - name: 'Build MCM SDK and Media Proxy'
      run: sudo -E ./build.sh

    - name: 'Build MCM FFmpeg plugin'
      working-directory: ${{ github.workspace }}/ffmpeg-plugin
      run: |
        sudo -E ./clone-and-patch-ffmpeg.sh && \
        sudo -E ./configure-ffmpeg.sh && \
        sudo -E ./build-ffmpeg.sh

    - name: 'Perform CodeQL Analysis'
      uses: github/codeql-action/analyze@b611370bb5703a7efb587f9d136a52ea24c5c38c # v3.25.11
      with:
        category: "/language:c-cpp"
